/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: codec.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./gogoproto/gogo";
import * as dependency_2 from "./tendermint/abci/types";
import * as dependency_3 from "./tendermint/types/block";
import * as dependency_4 from "./tendermint/types/types";
import * as dependency_5 from "./tendermint/types/validator";
import * as pb_1 from "google-protobuf";
export namespace fig.tm.codec.v1 {
    export class EventList extends pb_1.Message {
        constructor(data?: any[] | {
            new_block?: EventBlock;
            transaction?: EventTx[];
            validator_set_updates?: EventValidatorSetUpdates;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_block" in data && data.new_block != undefined) {
                    this.new_block = data.new_block;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
                if ("validator_set_updates" in data && data.validator_set_updates != undefined) {
                    this.validator_set_updates = data.validator_set_updates;
                }
            }
        }
        get new_block() {
            return pb_1.Message.getWrapperField(this, EventBlock, 1) as EventBlock;
        }
        set new_block(value: EventBlock) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get transaction() {
            return pb_1.Message.getRepeatedWrapperField(this, EventTx, 2) as EventTx[];
        }
        set transaction(value: EventTx[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get validator_set_updates() {
            return pb_1.Message.getWrapperField(this, EventValidatorSetUpdates, 3) as EventValidatorSetUpdates;
        }
        set validator_set_updates(value: EventValidatorSetUpdates) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            new_block?: ReturnType<typeof EventBlock.prototype.toObject>;
            transaction?: ReturnType<typeof EventTx.prototype.toObject>[];
            validator_set_updates?: ReturnType<typeof EventValidatorSetUpdates.prototype.toObject>;
        }) {
            const message = new EventList({});
            if (data.new_block != null) {
                message.new_block = EventBlock.fromObject(data.new_block);
            }
            if (data.transaction != null) {
                message.transaction = data.transaction.map(item => EventTx.fromObject(item));
            }
            if (data.validator_set_updates != null) {
                message.validator_set_updates = EventValidatorSetUpdates.fromObject(data.validator_set_updates);
            }
            return message;
        }
        toObject() {
            const data: {
                new_block?: ReturnType<typeof EventBlock.prototype.toObject>;
                transaction?: ReturnType<typeof EventTx.prototype.toObject>[];
                validator_set_updates?: ReturnType<typeof EventValidatorSetUpdates.prototype.toObject>;
            } = {};
            if (this.new_block != null) {
                data.new_block = this.new_block.toObject();
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.map((item: EventTx) => item.toObject());
            }
            if (this.validator_set_updates != null) {
                data.validator_set_updates = this.validator_set_updates.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.new_block !== undefined)
                writer.writeMessage(1, this.new_block, () => this.new_block.serialize(writer));
            if (this.transaction !== undefined)
                writer.writeRepeatedMessage(2, this.transaction, (item: EventTx) => item.serialize(writer));
            if (this.validator_set_updates !== undefined)
                writer.writeMessage(3, this.validator_set_updates, () => this.validator_set_updates.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.new_block, () => message.new_block = EventBlock.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.transaction, () => pb_1.Message.addToRepeatedWrapperField(message, 2, EventTx.deserialize(reader), EventTx));
                        break;
                    case 3:
                        reader.readMessage(message.validator_set_updates, () => message.validator_set_updates = EventValidatorSetUpdates.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventList {
            return EventList.deserialize(bytes);
        }
    }
    export class EventData extends pb_1.Message {
        constructor(data?: any[] | {
            event?: Event;
            block?: EventBlock;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event" in data && data.event != undefined) {
                    this.event = data.event;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get event() {
            return pb_1.Message.getWrapperField(this, Event, 1) as Event;
        }
        set event(value: Event) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get block() {
            return pb_1.Message.getWrapperField(this, EventBlock, 2) as EventBlock;
        }
        set block(value: EventBlock) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            event?: ReturnType<typeof Event.prototype.toObject>;
            block?: ReturnType<typeof EventBlock.prototype.toObject>;
        }) {
            const message = new EventData({});
            if (data.event != null) {
                message.event = Event.fromObject(data.event);
            }
            if (data.block != null) {
                message.block = EventBlock.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                event?: ReturnType<typeof Event.prototype.toObject>;
                block?: ReturnType<typeof EventBlock.prototype.toObject>;
            } = {};
            if (this.event != null) {
                data.event = this.event.toObject();
            }
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.event !== undefined)
                writer.writeMessage(1, this.event, () => this.event.serialize(writer));
            if (this.block !== undefined)
                writer.writeMessage(2, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.event, () => message.event = Event.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.block, () => message.block = EventBlock.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventData {
            return EventData.deserialize(bytes);
        }
    }
    export class Event extends pb_1.Message {
        constructor(data?: any[] | {
            event_type?: string;
            attributes?: EventAttribute[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_type" in data && data.event_type != undefined) {
                    this.event_type = data.event_type;
                }
                if ("attributes" in data && data.attributes != undefined) {
                    this.attributes = data.attributes;
                }
            }
        }
        get event_type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set event_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get attributes() {
            return pb_1.Message.getRepeatedWrapperField(this, EventAttribute, 2) as EventAttribute[];
        }
        set attributes(value: EventAttribute[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            event_type?: string;
            attributes?: ReturnType<typeof EventAttribute.prototype.toObject>[];
        }) {
            const message = new Event({});
            if (data.event_type != null) {
                message.event_type = data.event_type;
            }
            if (data.attributes != null) {
                message.attributes = data.attributes.map(item => EventAttribute.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                event_type?: string;
                attributes?: ReturnType<typeof EventAttribute.prototype.toObject>[];
            } = {};
            if (this.event_type != null) {
                data.event_type = this.event_type;
            }
            if (this.attributes != null) {
                data.attributes = this.attributes.map((item: EventAttribute) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.event_type === "string" && this.event_type.length)
                writer.writeString(1, this.event_type);
            if (this.attributes !== undefined)
                writer.writeRepeatedMessage(2, this.attributes, (item: EventAttribute) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event_type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.attributes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, EventAttribute.deserialize(reader), EventAttribute));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class EventAttribute extends pb_1.Message {
        constructor(data?: any[] | {
            key?: string;
            value?: string;
            index?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get key() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get index() {
            return pb_1.Message.getField(this, 3) as boolean;
        }
        set index(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            key?: string;
            value?: string;
            index?: boolean;
        }) {
            const message = new EventAttribute({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                value?: string;
                index?: boolean;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.key === "string" && this.key.length)
                writer.writeString(1, this.key);
            if (typeof this.value === "string" && this.value.length)
                writer.writeString(2, this.value);
            if (this.index !== undefined)
                writer.writeBool(3, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventAttribute {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventAttribute();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    case 3:
                        message.index = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventAttribute {
            return EventAttribute.deserialize(bytes);
        }
    }
    export class EventBlock extends pb_1.Message {
        constructor(data?: any[] | {
            block?: dependency_3.tendermint.types.Block;
            block_id?: dependency_4.tendermint.types.BlockID;
            result_begin_block?: dependency_2.tendermint.abci.ResponseBeginBlock;
            result_end_block?: dependency_2.tendermint.abci.ResponseEndBlock;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("result_begin_block" in data && data.result_begin_block != undefined) {
                    this.result_begin_block = data.result_begin_block;
                }
                if ("result_end_block" in data && data.result_end_block != undefined) {
                    this.result_end_block = data.result_end_block;
                }
            }
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_3.tendermint.types.Block, 1) as dependency_3.tendermint.types.Block;
        }
        set block(value: dependency_3.tendermint.types.Block) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get block_id() {
            return pb_1.Message.getWrapperField(this, dependency_4.tendermint.types.BlockID, 2) as dependency_4.tendermint.types.BlockID;
        }
        set block_id(value: dependency_4.tendermint.types.BlockID) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get result_begin_block() {
            return pb_1.Message.getWrapperField(this, dependency_2.tendermint.abci.ResponseBeginBlock, 3) as dependency_2.tendermint.abci.ResponseBeginBlock;
        }
        set result_begin_block(value: dependency_2.tendermint.abci.ResponseBeginBlock) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get result_end_block() {
            return pb_1.Message.getWrapperField(this, dependency_2.tendermint.abci.ResponseEndBlock, 4) as dependency_2.tendermint.abci.ResponseEndBlock;
        }
        set result_end_block(value: dependency_2.tendermint.abci.ResponseEndBlock) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        static fromObject(data: {
            block?: ReturnType<typeof dependency_3.tendermint.types.Block.prototype.toObject>;
            block_id?: ReturnType<typeof dependency_4.tendermint.types.BlockID.prototype.toObject>;
            result_begin_block?: ReturnType<typeof dependency_2.tendermint.abci.ResponseBeginBlock.prototype.toObject>;
            result_end_block?: ReturnType<typeof dependency_2.tendermint.abci.ResponseEndBlock.prototype.toObject>;
        }) {
            const message = new EventBlock({});
            if (data.block != null) {
                message.block = dependency_3.tendermint.types.Block.fromObject(data.block);
            }
            if (data.block_id != null) {
                message.block_id = dependency_4.tendermint.types.BlockID.fromObject(data.block_id);
            }
            if (data.result_begin_block != null) {
                message.result_begin_block = dependency_2.tendermint.abci.ResponseBeginBlock.fromObject(data.result_begin_block);
            }
            if (data.result_end_block != null) {
                message.result_end_block = dependency_2.tendermint.abci.ResponseEndBlock.fromObject(data.result_end_block);
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof dependency_3.tendermint.types.Block.prototype.toObject>;
                block_id?: ReturnType<typeof dependency_4.tendermint.types.BlockID.prototype.toObject>;
                result_begin_block?: ReturnType<typeof dependency_2.tendermint.abci.ResponseBeginBlock.prototype.toObject>;
                result_end_block?: ReturnType<typeof dependency_2.tendermint.abci.ResponseEndBlock.prototype.toObject>;
            } = {};
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            if (this.block_id != null) {
                data.block_id = this.block_id.toObject();
            }
            if (this.result_begin_block != null) {
                data.result_begin_block = this.result_begin_block.toObject();
            }
            if (this.result_end_block != null) {
                data.result_end_block = this.result_end_block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block !== undefined)
                writer.writeMessage(1, this.block, () => this.block.serialize(writer));
            if (this.block_id !== undefined)
                writer.writeMessage(2, this.block_id, () => this.block_id.serialize(writer));
            if (this.result_begin_block !== undefined)
                writer.writeMessage(3, this.result_begin_block, () => this.result_begin_block.serialize(writer));
            if (this.result_end_block !== undefined)
                writer.writeMessage(4, this.result_end_block, () => this.result_end_block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => message.block = dependency_3.tendermint.types.Block.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.block_id, () => message.block_id = dependency_4.tendermint.types.BlockID.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.result_begin_block, () => message.result_begin_block = dependency_2.tendermint.abci.ResponseBeginBlock.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.result_end_block, () => message.result_end_block = dependency_2.tendermint.abci.ResponseEndBlock.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventBlock {
            return EventBlock.deserialize(bytes);
        }
    }
    export class EventTx extends pb_1.Message {
        constructor(data?: any[] | {
            tx_result?: TxResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx_result" in data && data.tx_result != undefined) {
                    this.tx_result = data.tx_result;
                }
            }
        }
        get tx_result() {
            return pb_1.Message.getWrapperField(this, TxResult, 1) as TxResult;
        }
        set tx_result(value: TxResult) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            tx_result?: ReturnType<typeof TxResult.prototype.toObject>;
        }) {
            const message = new EventTx({});
            if (data.tx_result != null) {
                message.tx_result = TxResult.fromObject(data.tx_result);
            }
            return message;
        }
        toObject() {
            const data: {
                tx_result?: ReturnType<typeof TxResult.prototype.toObject>;
            } = {};
            if (this.tx_result != null) {
                data.tx_result = this.tx_result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tx_result !== undefined)
                writer.writeMessage(1, this.tx_result, () => this.tx_result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTx {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTx();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tx_result, () => message.tx_result = TxResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventTx {
            return EventTx.deserialize(bytes);
        }
    }
    export class EventValidatorSetUpdates extends pb_1.Message {
        constructor(data?: any[] | {
            validator_updates?: dependency_5.tendermint.types.Validator[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator_updates" in data && data.validator_updates != undefined) {
                    this.validator_updates = data.validator_updates;
                }
            }
        }
        get validator_updates() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.tendermint.types.Validator, 1) as dependency_5.tendermint.types.Validator[];
        }
        set validator_updates(value: dependency_5.tendermint.types.Validator[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            validator_updates?: ReturnType<typeof dependency_5.tendermint.types.Validator.prototype.toObject>[];
        }) {
            const message = new EventValidatorSetUpdates({});
            if (data.validator_updates != null) {
                message.validator_updates = data.validator_updates.map(item => dependency_5.tendermint.types.Validator.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                validator_updates?: ReturnType<typeof dependency_5.tendermint.types.Validator.prototype.toObject>[];
            } = {};
            if (this.validator_updates != null) {
                data.validator_updates = this.validator_updates.map((item: dependency_5.tendermint.types.Validator) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator_updates !== undefined)
                writer.writeRepeatedMessage(1, this.validator_updates, (item: dependency_5.tendermint.types.Validator) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventValidatorSetUpdates {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventValidatorSetUpdates();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.validator_updates, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.tendermint.types.Validator.deserialize(reader), dependency_5.tendermint.types.Validator));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventValidatorSetUpdates {
            return EventValidatorSetUpdates.deserialize(bytes);
        }
    }
    export class TxResult extends pb_1.Message {
        constructor(data?: any[] | {
            height?: number;
            index?: number;
            tx?: Uint8Array;
            result?: dependency_2.tendermint.abci.ResponseDeliverTx;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("tx" in data && data.tx != undefined) {
                    this.tx = data.tx;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get height() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get index() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get tx() {
            return pb_1.Message.getField(this, 3) as Uint8Array;
        }
        set tx(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get result() {
            return pb_1.Message.getWrapperField(this, dependency_2.tendermint.abci.ResponseDeliverTx, 4) as dependency_2.tendermint.abci.ResponseDeliverTx;
        }
        set result(value: dependency_2.tendermint.abci.ResponseDeliverTx) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        static fromObject(data: {
            height?: number;
            index?: number;
            tx?: Uint8Array;
            result?: ReturnType<typeof dependency_2.tendermint.abci.ResponseDeliverTx.prototype.toObject>;
        }) {
            const message = new TxResult({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.tx != null) {
                message.tx = data.tx;
            }
            if (data.result != null) {
                message.result = dependency_2.tendermint.abci.ResponseDeliverTx.fromObject(data.result);
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                index?: number;
                tx?: Uint8Array;
                result?: ReturnType<typeof dependency_2.tendermint.abci.ResponseDeliverTx.prototype.toObject>;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.tx != null) {
                data.tx = this.tx;
            }
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height !== undefined)
                writer.writeUint64(1, this.height);
            if (this.index !== undefined)
                writer.writeUint32(2, this.index);
            if (this.tx !== undefined)
                writer.writeBytes(3, this.tx);
            if (this.result !== undefined)
                writer.writeMessage(4, this.result, () => this.result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TxResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TxResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readUint64();
                        break;
                    case 2:
                        message.index = reader.readUint32();
                        break;
                    case 3:
                        message.tx = reader.readBytes();
                        break;
                    case 4:
                        reader.readMessage(message.result, () => message.result = dependency_2.tendermint.abci.ResponseDeliverTx.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TxResult {
            return TxResult.deserialize(bytes);
        }
    }
}
