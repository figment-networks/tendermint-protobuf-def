// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: liquidity.v1.proto

package cosmos

import (
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MsgSwapWithinBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapRequesterAddress string `protobuf:"bytes,1,opt,name=swap_requester_address,json=swapRequesterAddress,proto3" json:"swap_requester_address,omitempty"`
	PoolId               uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	SwapTypeId           uint32 `protobuf:"varint,3,opt,name=swap_type_id,json=swapTypeId,proto3" json:"swap_type_id,omitempty"`
	OfferCoin            *Coin  `protobuf:"bytes,4,opt,name=offer_coin,json=offerCoin,proto3" json:"offer_coin,omitempty"`
	DemandCoinDenom      string `protobuf:"bytes,5,opt,name=demand_coin_denom,json=demandCoinDenom,proto3" json:"demand_coin_denom,omitempty"`
	OfferCoinFee         *Coin  `protobuf:"bytes,6,opt,name=offer_coin_fee,json=offerCoinFee,proto3" json:"offer_coin_fee,omitempty"`
	OrderPrice           string `protobuf:"bytes,7,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"`
}

func (x *MsgSwapWithinBatch) Reset() {
	*x = MsgSwapWithinBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_liquidity_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSwapWithinBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSwapWithinBatch) ProtoMessage() {}

func (x *MsgSwapWithinBatch) ProtoReflect() protoreflect.Message {
	mi := &file_liquidity_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSwapWithinBatch.ProtoReflect.Descriptor instead.
func (*MsgSwapWithinBatch) Descriptor() ([]byte, []int) {
	return file_liquidity_v1_proto_rawDescGZIP(), []int{0}
}

func (x *MsgSwapWithinBatch) GetSwapRequesterAddress() string {
	if x != nil {
		return x.SwapRequesterAddress
	}
	return ""
}

func (x *MsgSwapWithinBatch) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *MsgSwapWithinBatch) GetSwapTypeId() uint32 {
	if x != nil {
		return x.SwapTypeId
	}
	return 0
}

func (x *MsgSwapWithinBatch) GetOfferCoin() *Coin {
	if x != nil {
		return x.OfferCoin
	}
	return nil
}

func (x *MsgSwapWithinBatch) GetDemandCoinDenom() string {
	if x != nil {
		return x.DemandCoinDenom
	}
	return ""
}

func (x *MsgSwapWithinBatch) GetOfferCoinFee() *Coin {
	if x != nil {
		return x.OfferCoinFee
	}
	return nil
}

func (x *MsgSwapWithinBatch) GetOrderPrice() string {
	if x != nil {
		return x.OrderPrice
	}
	return ""
}

var File_liquidity_v1_proto protoreflect.FileDescriptor

var file_liquidity_v1_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x1a, 0x0a, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x06, 0x0a, 0x12, 0x4d, 0x73, 0x67, 0x53, 0x77, 0x61, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0xcc, 0x01, 0x0a, 0x16,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x95, 0x01, 0xf2,
	0xde, 0x1f, 0x1d, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x92, 0x41, 0x71, 0x32, 0x2d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4a, 0x2f, 0x22, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x31, 0x65, 0x33, 0x35, 0x79,
	0x36, 0x39, 0x72, 0x68, 0x72, 0x74, 0x37, 0x79, 0x34, 0x79, 0x63, 0x65, 0x35, 0x6c, 0x35, 0x75,
	0x37, 0x33, 0x73, 0x6a, 0x6e, 0x78, 0x75, 0x30, 0x6c, 0x33, 0x33, 0x77, 0x76, 0x7a, 0x6e, 0x79,
	0x75, 0x6e, 0x22, 0xa2, 0x02, 0x0e, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x14, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2e, 0xf2, 0xde, 0x1f,
	0x0e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0xea,
	0xde, 0x1f, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x92, 0x41, 0x0e, 0x4a, 0x03, 0x22,
	0x31, 0x22, 0xa2, 0x02, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x06, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0xf2, 0xde, 0x1f, 0x13, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x22, 0x92, 0x41, 0x0e, 0x4a, 0x03, 0x22, 0x31, 0x22, 0xa2, 0x02, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x81, 0x01, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x51, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x11, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x22,
	0x92, 0x41, 0x35, 0x4a, 0x28, 0x7b, 0x22, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x3a, 0x20, 0x22,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x58, 0x22, 0x2c, 0x20, 0x22, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x3a, 0x20, 0x22, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x22, 0x7d, 0xa2, 0x02, 0x08,
	0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x55, 0x0a, 0x11, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29,
	0xf2, 0xde, 0x1f, 0x18, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x92, 0x41, 0x0a, 0x4a,
	0x08, 0x22, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x42, 0x22, 0x52, 0x0f, 0x64, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x52, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x15, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x66,
	0x65, 0x65, 0x22, 0x92, 0x41, 0x32, 0x4a, 0x25, 0x7b, 0x22, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22,
	0x3a, 0x20, 0x22, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x58, 0x22, 0x2c, 0x20, 0x22, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x35, 0x30, 0x30, 0x30, 0x22, 0x7d, 0xa2, 0x02, 0x08,
	0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x79, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0xf2, 0xde, 0x1f,
	0x12, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x22, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xc8, 0xde, 0x1f,
	0x00, 0x92, 0x41, 0x11, 0x4a, 0x05, 0x22, 0x31, 0x2e, 0x31, 0x22, 0xa2, 0x02, 0x07, 0x73, 0x64,
	0x6b, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x66, 0x69, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x2f, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2d, 0x64, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_liquidity_v1_proto_rawDescOnce sync.Once
	file_liquidity_v1_proto_rawDescData = file_liquidity_v1_proto_rawDesc
)

func file_liquidity_v1_proto_rawDescGZIP() []byte {
	file_liquidity_v1_proto_rawDescOnce.Do(func() {
		file_liquidity_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_liquidity_v1_proto_rawDescData)
	})
	return file_liquidity_v1_proto_rawDescData
}

var file_liquidity_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_liquidity_v1_proto_goTypes = []interface{}{
	(*MsgSwapWithinBatch)(nil), // 0: liquidity.v1.MsgSwapWithinBatch
	(*Coin)(nil),               // 1: cosmos.v1.Coin
}
var file_liquidity_v1_proto_depIdxs = []int32{
	1, // 0: liquidity.v1.MsgSwapWithinBatch.offer_coin:type_name -> cosmos.v1.Coin
	1, // 1: liquidity.v1.MsgSwapWithinBatch.offer_coin_fee:type_name -> cosmos.v1.Coin
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_liquidity_v1_proto_init() }
func file_liquidity_v1_proto_init() {
	if File_liquidity_v1_proto != nil {
		return
	}
	file_cosmos_v1_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_liquidity_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSwapWithinBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_liquidity_v1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_liquidity_v1_proto_goTypes,
		DependencyIndexes: file_liquidity_v1_proto_depIdxs,
		MessageInfos:      file_liquidity_v1_proto_msgTypes,
	}.Build()
	File_liquidity_v1_proto = out.File
	file_liquidity_v1_proto_rawDesc = nil
	file_liquidity_v1_proto_goTypes = nil
	file_liquidity_v1_proto_depIdxs = nil
}
